/*
 * This source code is released into the public domain.
 */

module;

#include <compare>
#include <cstdint>
#include <cstdlib>

#include <ucl.h>

export module nihil.ucl:integer;

import :object;
import :type;

namespace nihil::ucl {

export struct integer final : object {
	using contained_type = std::int64_t;
	inline static constexpr object_type ucl_type = object_type::integer;

	// Create a new integer from a UCL object.
	integer(ref_t, ::ucl_object_t const *uobj);
	integer(noref_t, ::ucl_object_t *uobj);

	// Create a new default-initialised integer.
	integer();

	// Create a new integer from a value.
	explicit integer(contained_type value);

	// Return the value of this object.
	auto value(this integer const &self) -> contained_type;
};

/*
 * Comparison operators.
 */

export auto operator== (integer const &a, integer const &b) -> bool;
export auto operator== (integer const &a, integer::contained_type b) -> bool;
export auto operator<=> (integer const &a, integer const &b)
	-> std::strong_ordering;
export auto operator<=> (integer const &a, integer::contained_type b)
	-> std::strong_ordering;

} // namespace nihil::ucl

/*
 * This source code is released into the public domain.
 */

module;

#include <cassert>
#include <cstdint>
#include <cstdlib>
#include <string>

#include <ucl.h>

export module nihil.ucl:boolean;

import :object;

namespace nihil::ucl {

export struct boolean final : object {
	using contained_type = bool;

	inline static constexpr object_type ucl_type = object_type::boolean;

	// Create a new boolean from a UCL object.
	boolean(ref_t, ::ucl_object_t const *uobj);
	boolean(noref_t, ::ucl_object_t *uobj);

	// Create a new default-initialised boolean.
	boolean();

	// Create a new boolean from a value.
	explicit boolean(contained_type value);

	// Return this object's value.
	auto value(this boolean const &self) -> contained_type;
};

/*
 * Comparison operators.
 */

export auto operator== (boolean const &a, boolean const &b) -> bool;
export auto operator== (boolean const &a, boolean::contained_type b) -> bool;
export auto operator<=> (boolean const &a, boolean const &b)
	-> std::strong_ordering;
export auto operator<=> (boolean const &a, boolean::contained_type b)
	-> std::strong_ordering;

} // namespace nihil::ucl

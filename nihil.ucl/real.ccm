/*
 * This source code is released into the public domain.
 */

module;

#include <cassert>
#include <cstdlib>
#include <string>

#include <ucl.h>

export module nihil.ucl:real;

import :object;

namespace nihil::ucl {

export struct real final : object {
	using value_type = double;

	inline static constexpr object_type ucl_type = object_type::real;

	// Create a new real from a UCL object.
	real(ref_t, ::ucl_object_t const *uobj)
		: object(nihil::ucl::ref, uobj)
	{
		if (type() != ucl_type)
			throw type_mismatch(ucl_type, type());
	}

	real(noref_t, ::ucl_object_t *uobj)
		: object(noref, uobj)
	{
		if (type() != ucl_type)
			throw type_mismatch(ucl_type, type());
	}

	// Create a new real from a value.
	real(value_type value)
		: object(noref, ::ucl_object_fromdouble(value))
	{
		if (_object == nullptr)
			throw error("failed to create UCL object");
	}

	auto value(this real const &self) -> value_type
	{
		auto v = value_type{};
		auto const *uobj = self.get_ucl_object();

		if (::ucl_object_todouble_safe(uobj, &v))
			return v;

		std::abort();
	}
};

/*
 * Comparison operators.
 */

export auto operator== (real const &a, real const &b)
	-> bool
{
	return a.value() == b.value();
}

export auto operator<=> (real const &a, real const &b)
	-> std::partial_ordering
{
	return a.value() <=> b.value();
}

export auto operator== (real const &a, real::value_type b)
	-> bool
{
	return a.value() == b;
}

export auto operator<=> (real const &a, real::value_type b)
	-> std::partial_ordering
{
	return a.value() <=> b;
}

} // namespace nihil::ucl

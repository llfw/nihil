/*
 * This source code is released into the public domain.
 */

module;

#include <functional>
#include <iostream>
#include <map>
#include <string>
#include <utility>

export module nihil:command_map;

import :next_word;
import :usage_error;

/*
 * command_map represents a hierarchical list of commands.  At each level,
 * a command is mapped to a handler, which can either be a function, in
 * which case we execute the function, or another command_map, in which
 * case we invoke the new map
 */

namespace nihil {

struct command_base {
	command_base(std::string_view path)
		: _path(path)
	{
	}

	[[nodiscard]] auto path(this command_base const &self)
		-> std::string_view
	{
		return self._path;
	}

	[[nodiscard]] virtual auto invoke(int argc, char **argv) -> int = 0;

private:
	std::string_view _path;
};

/*
 * Register a command; used by command<>::command().
 */
auto register_command(std::string_view path, command_base *) noexcept -> void;

/*
 * A command that can be invoked.  Instantiating a command adds this command
 * to the global command table.  If an error occurs, the program will abort.
 */
export template<typename Fn>
struct command final : command_base {
	command(std::string_view path, Fn func) noexcept
		: command_base(path)
		, _func(func)
	{
		register_command(path, this);
	}

	[[nodiscard]] auto invoke(int argc, char **argv) -> int final
	{
		return std::invoke(_func, argc, argv);
	}

private:
	Fn _func;
};

// The public API.
export [[nodiscard]] auto dispatch_command(int argc, char **argv) -> int;
export auto print_usage(std::string_view prefix) -> void;

} // namespace nihil
